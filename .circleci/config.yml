version: 2.1
parameters:
  run_ui_tests:
    type: boolean
    default: false
  run_unit_tests:
    type: boolean
    default: true
  environment:
    type: string
    default: devdata

###############################################################################
# Env vars
###############################################################################
common_env_vars: &common_env_vars
  ENVIRONMENT: << pipeline.parameters.environment >>
  LITE_API_URL: https://lite-api-<< pipeline.parameters.environment >>.london.cloudapps.digital/
  PIPENV_VENV_IN_PROJECT: enabled

###############################################################################
# Images
###############################################################################

image_python: &image_python
  image: circleci/python:3.7

image_python_browsers: &image_python_browsers
  image: circleci/python:3.7-browsers

image_postgres: &image_postgres
  image: circleci/postgres:9.5-alpine-ram
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_DB: postgres


###############################################################################
# Commands
###############################################################################

commands:

  vpn_install:
    description: "Install OpenVPN client"
    steps:
      - run:
          name: Install OpenVPN
          command: |
            # There seems to be a bug with the openvpn aptrepo sources
            sudo apt-get update # for apt-get to recognise openvpn
            sudo apt-get remove openvpn # remove ubuntu aptrepo source
            sudo apt-get update
            sudo apt-get install openvpn -y
  vpn_connect:
    description: "Connect to OpenVPN"
    parameters:
      config:
        description: "ENV var name containing OpenVPN client .ovpn config file content base64 encoded"
        type: env_var_name
        default: VPN_CONFIG
    steps:
      - run:
          name: Init VPN
          command: |
            echo ${<<parameters.config>>:?} | base64 --decode >> config.ovpn
      - run:
          name: Connect to VPN
          command: |
            wget -qO- http://checkip.amazonaws.com | tee initial.ip
            sudo openvpn --config config.ovpn > openvpn.log 2>&1 &
            while [ -n "$(ip addr show tun0 2>&1 > /dev/null)" ]; do
              sleep 0.1;
            done
            cat openvpn.log
            wget -qO- http://checkip.amazonaws.com | tee final.ip
            if [ "$(cat initial.ip)" == "$(cat final.ip)" ]
            then
              echo "This computer's apparent public IP address was not different after connecting"
              echo "This may mean that your VPN is not configured correctly."
              exit 1
            fi
  vpn_disconnect:
    description: "Disconnect from OpenVPN"
    steps:
      - run:
          name: Disconnect from VPN
          command: sudo killall openvpn || true
      - run:
          name: remove OpenVPN config
          command: sudo rm config.ovpn

  setup_code:
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run: pipenv sync --dev
      - save_cache:
          paths:
            - ./.venv
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run: git submodule update --init

  unit_tests:
    steps:
      - run: pipenv run pytest

  ui_tests:
    steps:
      - run: pipenv run pytest -x
      - store_artifacts:
          path: ui_tests/screenshots
  lint:
    steps:
      - run: pipenv run bandit -r .
      - run: pipenv run prospector
      - run: pipenv run black . --check --diff


###############################################################################
# Jobs
###############################################################################

jobs:
  lint:
    docker:
      - <<: *image_python
    steps:
      - setup_code
      - lint

  caseworker_unit_test:
    docker:
      - <<: *image_python
      - <<: *image_postgres
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.caseworker.env
      PYTEST_ADDOPTS: unit_tests/caseworker --capture=no --nomigrations
    steps:
      - setup_code
      - unit_tests

  exporter_unit_test:
    docker:
      - <<: *image_python
      - <<: *image_postgres
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.exporter.env
      PYTEST_ADDOPTS: unit_tests/exporter --capture=no --nomigrations
    steps:
      - setup_code
      - unit_tests

  caseworker_ui_test:
    docker:
      - <<: *image_python_browsers
      - <<: *image_postgres
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.caseworker
      DATABASE_URL: postgres://postgres:password@localhost:5430/postgres
      PYTEST_ADDOPTS: ui_tests/caseworker --capture=no --nomigrations
    steps:
      - setup_code
      - ui_tests

  exporter_ui_test:
    docker:
      - <<: *image_python_browsers
      - <<: *image_postgres
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.exporter
      DATABASE_URL: postgres://postgres:password@localhost:5430/postgres
      PYTEST_ADDOPTS: ui_tests/exporter --capture=no --nomigrations
    steps:
      - setup_code
      - vpn_install
      - vpn_connect
      - ui_tests
      - vpn_disconnect


workflows:
  version: 2
  unit_test:
    when: << pipeline.parameters.run_unit_tests >>
    jobs:
      - lint
      - caseworker_unit_test
      - exporter_unit_test
  ui_tests:
    when: << pipeline.parameters.run_ui_tests >>
    jobs:
      - caseworker_ui_test
      - exporter_ui_test
